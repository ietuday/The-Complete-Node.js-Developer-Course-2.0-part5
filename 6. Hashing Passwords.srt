1
00:00:00,150 --> 00:00:05,250
In this video you're going to learn how to hash users passwords before saving them to the database which

2
00:00:05,250 --> 00:00:09,590
means a user is still going to send the plain text password in the post user's request.

3
00:00:09,630 --> 00:00:14,820
You will still validate the plain text version making sure it's of a certain length then you're going

4
00:00:14,820 --> 00:00:17,640
to hash it salted and store it in the database.

5
00:00:17,640 --> 00:00:22,200
This is much more secure than what we're currently doing which is storing that plain text password which

6
00:00:22,260 --> 00:00:24,170
is a terrible idea.

7
00:00:24,180 --> 00:00:28,590
Now in order to get this hashing done we're going to use an algorithm called the script to be script

8
00:00:28,590 --> 00:00:32,700
is fantastic because it is super secure and it has salting built in.

9
00:00:32,700 --> 00:00:36,660
Which means you don't need to go through the effort to write the code to solve your passwords.

10
00:00:36,690 --> 00:00:39,930
You can simply take advantage of the B crypt algorithm.

11
00:00:40,140 --> 00:00:43,590
Now to install this over inside of the terminal we're going around NPM.

12
00:00:43,620 --> 00:00:46,050
I was at the module name.

13
00:00:46,050 --> 00:00:51,420
There are quite a few different variations of the B crypt algorithm on NPM.

14
00:00:51,480 --> 00:00:59,190
I always use the crypt J.S. and this library is completely written inside of javascript which means

15
00:00:59,190 --> 00:01:00,670
there are no dependencies.

16
00:01:00,690 --> 00:01:06,270
There is also a library called B crypt which has the same API but I run into so many problems with that

17
00:01:06,450 --> 00:01:09,030
especially across operating systems.

18
00:01:09,180 --> 00:01:15,900
B crypt dot J.S. at the most recent version 2.0 3.0 and I'm going to tack on the Save flag to add it

19
00:01:15,900 --> 00:01:17,110
to my package.

20
00:01:17,190 --> 00:01:18,700
Jason File.

21
00:01:18,750 --> 00:01:23,700
Now before we actually add this to the application let's just play around with B crypt really quickly

22
00:01:23,790 --> 00:01:27,790
over in the hashing J.S. file over inside of hashing.

23
00:01:27,810 --> 00:01:31,360
J.S. we can comment out all the other examples we have.

24
00:01:31,410 --> 00:01:33,860
You can feel free to delete these or keep them.

25
00:01:33,860 --> 00:01:36,860
This is going to be one of the last times we actually edit this file.

26
00:01:37,620 --> 00:01:38,450
Up the very top.

27
00:01:38,460 --> 00:01:41,340
We are going to load in the algorithm.

28
00:01:41,440 --> 00:01:48,850
Let's make a constant called B crypt and set it equal to the return result from requiring B crypt J

29
00:01:48,850 --> 00:01:50,170
S.

30
00:01:50,200 --> 00:01:53,030
Now if you want to look at the docs you can always head over to NPM.

31
00:01:53,050 --> 00:01:54,700
Let me just point you in the right direction.

32
00:01:54,710 --> 00:01:55,790
Really quickly.

33
00:01:55,820 --> 00:01:56,380
B crypt.

34
00:01:56,400 --> 00:01:59,130
J.S. NPM should get you the right result.

35
00:01:59,140 --> 00:01:59,930
And here it is.

36
00:02:00,070 --> 00:02:02,630
It's the NPM package B crypt dot J.

37
00:02:03,010 --> 00:02:05,440
This module has fantastic documentation.

38
00:02:05,440 --> 00:02:09,730
So if you ever want to read more about the algorithm or see all of the other methods that are available

39
00:02:09,730 --> 00:02:12,610
to you it's all defined here.

40
00:02:12,610 --> 00:02:17,300
Now in order to use a B script J.S. inside of a hashing file we need to do two things.

41
00:02:17,320 --> 00:02:19,500
First we have to get some sort of value.

42
00:02:19,870 --> 00:02:26,430
Let's make a variable we'll call it password and we'll set it equal to 1 to 3 A B C.

43
00:02:26,620 --> 00:02:30,870
Exclamation mark and then we're going to go ahead and actually hash it.

44
00:02:30,970 --> 00:02:34,920
Now in order to hash a password using the script we have to call two methods.

45
00:02:35,080 --> 00:02:36,660
One is Jeon salt.

46
00:02:36,730 --> 00:02:38,210
This is going to generate a salt.

47
00:02:38,230 --> 00:02:40,320
We can use to salt our password.

48
00:02:40,360 --> 00:02:44,390
The other one is the hash method which actually goes through the hash in process.

49
00:02:44,410 --> 00:02:46,840
Now sorting passwords is really important.

50
00:02:46,840 --> 00:02:52,300
Imagine to have a password like password one if I hashed out without salting it I'm going to get the

51
00:02:52,300 --> 00:02:53,700
same result every time.

52
00:02:53,830 --> 00:02:58,190
Let's just say for example purposes the result is an an end.

53
00:02:58,320 --> 00:03:00,900
Now obviously that's not the case but this is just an example.

54
00:03:01,020 --> 00:03:07,210
Now the problem with this strategy is someone can precompile a list of passwords and hashed values and

55
00:03:07,210 --> 00:03:09,130
they can use that as a lookup table.

56
00:03:09,130 --> 00:03:15,730
They can say hey I've ran through 15000 English words including password 1 and I had the hash values

57
00:03:15,730 --> 00:03:21,550
for all of them in an object where the key is the password and the value is the actual hash.

58
00:03:21,550 --> 00:03:25,960
All I need to do is find the one that matches m and n and boom they have your password.

59
00:03:26,140 --> 00:03:27,550
When you sult a password.

60
00:03:27,550 --> 00:03:30,960
You're adding a bunch of random characters to that hash.

61
00:03:30,970 --> 00:03:36,370
This means that even if I hash the same password multiple times I'll get a different result.

62
00:03:36,490 --> 00:03:39,990
So no one can precomputed table to look at the passwords.

63
00:03:40,060 --> 00:03:46,330
Now in order to generate that salt we're going to call the crypt dot Janise salt.

64
00:03:46,550 --> 00:03:48,470
Jen salt takes two arguments.

65
00:03:48,490 --> 00:03:53,080
It's an asynchronous function the second argument is a callback function and the first one is the number

66
00:03:53,080 --> 00:03:55,770
of rounds you want to use to generate the salt.

67
00:03:55,900 --> 00:04:01,020
If the crypt is inherently slow and that's a good thing it's going to prevent brute force attacks.

68
00:04:01,030 --> 00:04:03,290
We're going to use 10 as the number of rounds.

69
00:04:03,310 --> 00:04:06,470
The bigger the number the longer the algorithm is going to take.

70
00:04:06,490 --> 00:04:11,320
I know people who use 120 rounds they intentionally make the crypt take longer.

71
00:04:11,350 --> 00:04:14,380
So no one can brute force these calls.

72
00:04:14,380 --> 00:04:20,280
Now obviously adding unnecessary length to your API is not a great idea but what it comes to passwords.

73
00:04:20,290 --> 00:04:21,760
It definitely is.

74
00:04:21,790 --> 00:04:25,600
This is going to prevent someone from making a million requests every second.

75
00:04:25,600 --> 00:04:30,460
Instead they may be able to make a few hundred which is going to greatly reduce the chance that they'll

76
00:04:30,460 --> 00:04:32,500
be able to crack a password.

77
00:04:32,500 --> 00:04:35,720
Now we're going to generate this salt passing in our callback function.

78
00:04:35,800 --> 00:04:41,460
We'll get an error and a salt value and then we can go ahead and finish off the Aero function and end

79
00:04:41,490 --> 00:04:49,470
here this is where we're going to actually do the hashing decrypt dot hash and inside of here we're

80
00:04:49,470 --> 00:04:51,270
going to pass in three arguments.

81
00:04:51,330 --> 00:04:53,850
The first one is the thing to hash in our case.

82
00:04:53,850 --> 00:04:55,770
We're going to be hashing the password.

83
00:04:55,770 --> 00:04:57,540
We have that variable declared right here.

84
00:04:57,540 --> 00:04:59,490
The second is the salt to use.

85
00:04:59,490 --> 00:05:00,120
We have the salt.

86
00:05:00,120 --> 00:05:03,050
We just generated it via the function up above.

87
00:05:03,060 --> 00:05:08,490
The third is the callback function the callback function is going to get called with an error if any.

88
00:05:08,490 --> 00:05:14,440
And the hash value this hash value is what we want to store inside of our database.

89
00:05:14,460 --> 00:05:15,870
We don't want to store the password.

90
00:05:15,870 --> 00:05:17,770
We want to store the hash.

91
00:05:18,090 --> 00:05:24,240
Let's go out and log this to the screen using console log and simply passing in hash that I'm going

92
00:05:24,240 --> 00:05:28,050
to go ahead and run the hashing file inside of the terminal.

93
00:05:28,050 --> 00:05:34,940
I'll use clear to clear the terminal output and we can run node playground forward slash hashing.

94
00:05:35,070 --> 00:05:36,750
J.S. when I do this.

95
00:05:36,830 --> 00:05:39,140
I get my hashed value.

96
00:05:39,140 --> 00:05:43,670
Now this hash value has a lot of really awesome information stored inside of it and as the number of

97
00:05:43,670 --> 00:05:45,910
rounds you can see we have 10 right here.

98
00:05:45,980 --> 00:05:48,330
It has the length for the hash and the salt.

99
00:05:48,410 --> 00:05:51,050
All of that information is stored right inside.

100
00:05:51,050 --> 00:05:55,520
There's no reason to have two things a salt and a password value in the database.

101
00:05:55,520 --> 00:05:57,350
That's why the crypt is so fantastic.

102
00:05:57,350 --> 00:06:02,550
The self is built in and there's nothing to worry about in terms of storing a separate value.

103
00:06:02,840 --> 00:06:05,580
Now that we have this hash we can look at how to actually compare.

104
00:06:05,700 --> 00:06:11,300
If this hash equals the plaintext password this is what we're going to do when someone logs in to illustrate

105
00:06:11,330 --> 00:06:11,950
this.

106
00:06:12,050 --> 00:06:15,720
I'm going to create a variable called hashed password.

107
00:06:15,870 --> 00:06:18,100
I just copied the password to the clipboard.

108
00:06:18,210 --> 00:06:23,580
I'm going to paste it inside of quotes right here and now we're going to try to compare this value to

109
00:06:23,640 --> 00:06:24,600
the string.

110
00:06:24,630 --> 00:06:26,730
One two three ABC.

111
00:06:26,820 --> 00:06:28,170
Exclamation mark.

112
00:06:28,170 --> 00:06:32,110
To compare values we're going to go ahead and use our final function off of B crypt.

113
00:06:32,130 --> 00:06:34,320
This is B crypt dot.

114
00:06:34,320 --> 00:06:41,160
Compare a B crypt dot compare takes the plane value the hash value and then it lets you know if those

115
00:06:41,160 --> 00:06:43,090
two equal each other.

116
00:06:43,230 --> 00:06:48,510
The first argument to compare is the plain string in our case we have our plane password stored in the

117
00:06:48,510 --> 00:06:49,920
password variable.

118
00:06:49,920 --> 00:06:57,030
The second argument is the hash value we have that in hashed password and the third argument that is

119
00:06:57,030 --> 00:06:58,790
simply a callback function.

120
00:06:58,800 --> 00:07:02,880
It might get a call with an error and it is going to get called with a result.

121
00:07:02,970 --> 00:07:08,870
The result is either true or false it's true if the password matches the hash password and it's false.

122
00:07:08,880 --> 00:07:11,060
If they do not equal each other.

123
00:07:11,250 --> 00:07:16,140
Now we can finish off our aero function and we can go ahead and print the value of response to the screen

124
00:07:16,440 --> 00:07:17,900
using console dialog.

125
00:07:17,940 --> 00:07:19,220
R e s.

126
00:07:19,500 --> 00:07:24,750
And we can comment out our previous calls to John salt and hash since we already have the hash value

127
00:07:24,750 --> 00:07:25,800
right here.

128
00:07:25,800 --> 00:07:30,820
Now I can say it hashing out J S and over inside of the terminal we can run the file.

129
00:07:30,960 --> 00:07:32,110
I'm going to rerun the file.

130
00:07:32,280 --> 00:07:33,630
And what do we get we get.

131
00:07:33,630 --> 00:07:40,830
True we're getting true back because the password password 1 2 3 ABC exclamation mark does indeed equal

132
00:07:40,920 --> 00:07:42,740
this hashed value.

133
00:07:42,750 --> 00:07:49,180
Now if we were to change the password setting an equal to something else like 1 2 3 exclamation mark

134
00:07:49,180 --> 00:07:52,570
without the ABC this is going to result in false.

135
00:07:52,570 --> 00:07:55,580
If I rerun the file that's exactly what we get.

136
00:07:55,630 --> 00:07:59,910
And this is what we're going to do when we loggin a user We're going to fetch the value out of the database

137
00:07:59,920 --> 00:08:04,810
the hashed password value we're going to compare it to the plain text value they gave us and then we'll

138
00:08:04,810 --> 00:08:09,840
be able to use this response variable to determine whether or not the password was correct.

139
00:08:09,850 --> 00:08:14,070
Now that we know how to use be crypt we're going to add it inside of our user model.

140
00:08:14,110 --> 00:08:17,520
We're going to be hashing all of our passwords before we save them.

141
00:08:17,770 --> 00:08:22,000
Now in order to do this but we're going to explore is something called mongoose middleware mongoose

142
00:08:22,000 --> 00:08:26,080
middleware lets you run certain code before or after certain events.

143
00:08:26,110 --> 00:08:30,280
For example an update of that we can run some code before we update a model.

144
00:08:30,340 --> 00:08:32,470
We can run some code after we update it.

145
00:08:32,500 --> 00:08:38,890
In our case we want to run some code before a document is saved before we ever save that document to

146
00:08:38,890 --> 00:08:39,560
the database.

147
00:08:39,610 --> 00:08:45,400
We want to make sure the hashed password is in place to get this done we're going to explore the documentation

148
00:08:45,430 --> 00:08:47,120
real quick so you know where it is.

149
00:08:47,160 --> 00:08:52,720
There is a ton of middleware methods that we won't be using but you should know where they are mongoose

150
00:08:52,810 --> 00:08:55,990
middleware is going to bring you to that documentation page.

151
00:08:55,990 --> 00:09:00,880
Here we are we have the docs middleware page and up above they outline all of the different events.

152
00:09:00,880 --> 00:09:04,720
We have an in it event validate save remove and countless others.

153
00:09:04,720 --> 00:09:06,760
Well not countless But quite a few.

154
00:09:06,850 --> 00:09:12,370
If you scroll down below you can get a quick idea about exactly how it works right here we have some

155
00:09:12,380 --> 00:09:19,240
schema pretended it's our user schema and what we do is we attach an event user schema dot pre runs

156
00:09:19,270 --> 00:09:22,230
the code before the event the event is saved.

157
00:09:22,240 --> 00:09:27,730
And right here we actually run the code we call next when we're done and that is when the model gets

158
00:09:27,730 --> 00:09:29,260
saved to the database.

159
00:09:29,260 --> 00:09:30,790
This is exactly what we're going to do.

160
00:09:30,880 --> 00:09:35,830
Only inside of the callback we're going to be hashing and the password to get this done we can pull

161
00:09:35,830 --> 00:09:41,740
up Adam and we can start modifying our user schema down near the bottom of the file just below find

162
00:09:41,740 --> 00:09:42,570
by token.

163
00:09:42,610 --> 00:09:51,120
We're going to attach something else to user schema user schema the dot pre this is going to run some

164
00:09:51,120 --> 00:09:56,760
code before a given event and the event we want to run code before is the save event before we ever

165
00:09:56,910 --> 00:09:58,650
save the doc to the database.

166
00:09:58,710 --> 00:10:00,810
We want to make some changes to it.

167
00:10:00,810 --> 00:10:05,070
Now I am going to be using a regular function once again and because we are going to need access to

168
00:10:05,070 --> 00:10:06,470
the this binding.

169
00:10:06,630 --> 00:10:11,820
So I use the function keyword and this is going to get called with the next argument you have to provide

170
00:10:11,820 --> 00:10:15,650
this argument and you have to call it somewhere inside of your function.

171
00:10:15,720 --> 00:10:20,280
If you don't provide it and you don't call it the middleware is never going to complete and your program

172
00:10:20,340 --> 00:10:23,280
is going to crash inside of here.

173
00:10:23,280 --> 00:10:28,380
We're going to get access to the individual document much like we've got access to it up above and generate

174
00:10:28,390 --> 00:10:29,320
auth token.

175
00:10:29,580 --> 00:10:33,950
We created a variable lowercase U user and said equal to the value of this.

176
00:10:33,960 --> 00:10:36,530
That's exactly what I'm going to do right here.

177
00:10:36,570 --> 00:10:39,080
We're make a variable user setting an equal to this.

178
00:10:39,180 --> 00:10:42,900
And now we can go ahead and check if the password was modified.

179
00:10:42,900 --> 00:10:44,720
Now this is a really important thing.

180
00:10:44,920 --> 00:10:49,530
There is going to be times where we save the document and we're never going to have updated the password

181
00:10:49,740 --> 00:10:52,150
which means the password will already be hashed.

182
00:10:52,170 --> 00:10:55,990
Imagine I saved a document with the plain text password then the password gets hashed.

183
00:10:56,070 --> 00:10:59,270
Later on I update something that's not the password like the email.

184
00:10:59,310 --> 00:11:00,990
This middleware is going to run again.

185
00:11:00,990 --> 00:11:05,970
That means we're going to hash our hash and the program is going to break but we're going to do is use

186
00:11:05,970 --> 00:11:15,040
a method available on our instance called user data is modified is modified takes an individual property

187
00:11:15,430 --> 00:11:22,150
like password and it returns True or false returns true if password is modified it returns false if

188
00:11:22,150 --> 00:11:22,810
it's not.

189
00:11:22,870 --> 00:11:24,670
And we only want to encrypt the password.

190
00:11:24,670 --> 00:11:33,010
If it was just modified which means we can wrap this inside of an IF condition if the user is password

191
00:11:33,010 --> 00:11:35,310
modified function returns true.

192
00:11:35,410 --> 00:11:37,390
We're going to go ahead and run some code.

193
00:11:37,420 --> 00:11:39,290
This is where we're going to hash the password.

194
00:11:39,490 --> 00:11:44,050
If it is not modified inside of the else statement we'll simply call next.

195
00:11:44,080 --> 00:11:45,820
Moving on with the middleware.

196
00:11:46,000 --> 00:11:51,760
Now if the password is modified This is where we want to add our two calls the call to gen's salt and

197
00:11:51,820 --> 00:11:56,770
the call to hash before we can call either of them we do have to load them in up at the top of the file

198
00:11:57,190 --> 00:11:58,220
just below load.

199
00:11:58,230 --> 00:12:04,330
I'm going to create a new constant called B crypt and will require it just like we did in hashing J

200
00:12:04,350 --> 00:12:07,210
J.S. require the B script J.

201
00:12:07,220 --> 00:12:11,650
S now that we have an imported it's time for you to complete the rest.

202
00:12:11,650 --> 00:12:13,840
This is going to be your challenge.

203
00:12:13,840 --> 00:12:20,050
You already know how to create a salt and how to hash a password you have access to the password via

204
00:12:20,350 --> 00:12:22,290
user password.

205
00:12:22,450 --> 00:12:28,570
So instead of referencing the password variable like we do here you would reference user password.

206
00:12:28,570 --> 00:12:35,050
Now once you have the hash value after you call decrypt hash you're going to set it on user dot password

207
00:12:35,080 --> 00:12:41,310
user dot password is going to equal the hash value then you're going to go ahead and call.

208
00:12:41,380 --> 00:12:44,730
Next you have to call next after you set that value.

209
00:12:44,740 --> 00:12:47,140
Otherwise the middleware will never complete.

210
00:12:47,140 --> 00:12:49,000
All you have to do is fill out the rest.

211
00:12:49,030 --> 00:12:51,200
You have to call the genset function.

212
00:12:51,250 --> 00:12:57,520
You have to call the hash function and inside of the callback for hash you have to add these two statements.

213
00:12:57,520 --> 00:13:03,640
Once you're done want you to startup the server and make a call to sign up a new user inside of postman.

214
00:13:03,640 --> 00:13:08,950
Once you have the call completed and you get a 200 You should be able to head into Roboam mango view

215
00:13:09,020 --> 00:13:14,500
the record and you should see the hashed password as opposed to the plain text password.

216
00:13:14,500 --> 00:13:20,140
Also feel free to wipe your database using robo Mongo since we do have users with plain text passwords

217
00:13:20,140 --> 00:13:24,670
in there and it's a good idea to make sure that you don't have any old stray documents in there that's

218
00:13:24,670 --> 00:13:27,060
going to cause any errors in the future.

219
00:13:27,070 --> 00:13:28,330
Take a moment to knock this out.

220
00:13:28,330 --> 00:13:29,020
Test it.

221
00:13:29,020 --> 00:13:38,360
Make sure the stored password is to be hashed password and when you're done go ahead and click play.

222
00:13:38,420 --> 00:13:38,900
How'd you do.

223
00:13:38,900 --> 00:13:44,160
Hopefully you were able to integrate the B crypt algorithm into this middleware.

224
00:13:44,210 --> 00:13:50,900
The first thing I'm going to do is generate a salt using be crypt dot Jeon salt and we're going to set

225
00:13:50,900 --> 00:13:54,110
it up exactly like we did inside of our hashing File.

226
00:13:54,140 --> 00:13:58,370
We're going to pass in 10 for the rounds and then we'll have our call back here.

227
00:13:58,370 --> 00:14:04,050
We're going to get the actual salt value and we'll be able to use that to call hash.

228
00:14:04,070 --> 00:14:10,580
Next up we are going to call hash B crypt dot hash passing in our three arguments the first being the

229
00:14:10,580 --> 00:14:15,920
plain password which you have access to via user dot password.

230
00:14:15,920 --> 00:14:17,230
The second being the salt.

231
00:14:17,240 --> 00:14:19,110
We have that in the salt variable.

232
00:14:19,220 --> 00:14:21,910
And the third being our callback function.

233
00:14:22,010 --> 00:14:25,850
This is where we get the actual cash value.

234
00:14:25,850 --> 00:14:32,690
Now once we have the hash value we're going to need to update the user document by setting user password

235
00:14:33,020 --> 00:14:34,460
equal to the hash.

236
00:14:34,580 --> 00:14:39,530
Remember the user password property was just equal to the plaintext passwords so we have to override

237
00:14:39,530 --> 00:14:44,630
that in order to properly hide the plain text password then we're going to call next which is going

238
00:14:44,630 --> 00:14:48,710
to complete the middleware and it'll move on it to save the document.

239
00:14:48,710 --> 00:14:53,720
The next thing you needed to do after completing this was test it out over inside of the terminal going

240
00:14:53,720 --> 00:14:59,170
to shut down at my server it already is shut down so I can move into Roboam mango and wipe my database

241
00:15:02,320 --> 00:15:06,700
now back in the terminal I can start it up using node server server.

242
00:15:06,770 --> 00:15:07,150
J.

243
00:15:07,330 --> 00:15:11,920
And we can make a post man request over inside of post man.

244
00:15:11,950 --> 00:15:17,230
I'm going to make a post user's request to sign up a new user and since I just wipe the database I can

245
00:15:17,230 --> 00:15:19,270
use my default data right here.

246
00:15:19,270 --> 00:15:23,120
Notice the plain password it's password followed by an exclamation mark.

247
00:15:23,140 --> 00:15:27,640
Now when I send this off we still get to 200 and we can't quite tell if it worked or not because the

248
00:15:27,640 --> 00:15:32,980
only data we get back is the ID and the email which hasn't changed based on the code we just wrote in

249
00:15:32,980 --> 00:15:35,170
order to make sure the password is getting hashed.

250
00:15:35,170 --> 00:15:40,600
I'm going to head over to Roboam mango refresh my connection to get access to that to do app database

251
00:15:40,810 --> 00:15:44,460
and I'm going to explore the users collection inside of here.

252
00:15:44,460 --> 00:15:45,850
I can view my documents.

253
00:15:45,850 --> 00:15:51,980
I have one document and right here you see the hashed password and this is fantastic.

254
00:15:52,030 --> 00:15:54,580
The plain text password is no longer in sight.

255
00:15:54,580 --> 00:15:56,640
Instead we're storing the hashed password.

256
00:15:56,710 --> 00:16:01,780
So if someone does get access to this value they're not going to be any closer towards getting the user's

257
00:16:01,840 --> 00:16:02,950
password.

258
00:16:03,010 --> 00:16:07,320
Now that we have this in place we can go ahead and make a commit over inside of the terminal.

259
00:16:07,330 --> 00:16:15,150
I'm going to shut down the server run it get status and right here we have our three changed files.

260
00:16:15,200 --> 00:16:23,110
I can then run get commit with the M flag to make a message a good message for this one as hash user

261
00:16:23,140 --> 00:16:27,210
password before saving.

262
00:16:27,220 --> 00:16:31,250
I'm going to make the commit push it up to get help and that is it for this one.

263
00:16:31,260 --> 00:16:35,790
That is it for this one I will see you next time where we start testing those two routes.

264
00:16:35,800 --> 00:16:40,240
We're going to kick things off by updating how we seed the database that's coming up next so stay tuned.

265
00:16:40,240 --> 00:16:41,500
I will see you then

