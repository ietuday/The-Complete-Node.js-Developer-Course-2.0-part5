1
00:00:00,210 --> 00:00:05,640
Now that we have our user data in the test database we can actually write those test cases for the two

2
00:00:05,640 --> 00:00:07,320
routes we've created.

3
00:00:07,350 --> 00:00:09,950
This is going to happen in the bottom of the server test file.

4
00:00:09,990 --> 00:00:13,180
We'll be doing some of them together and some of them will be challenges.

5
00:00:13,200 --> 00:00:19,340
First up let's test the route that returns the individual authenticated user will make a new described

6
00:00:19,350 --> 00:00:23,370
block for a get users.

7
00:00:23,480 --> 00:00:29,960
Me and right in here we're going to add two test cases one and when we have a valid authentication token

8
00:00:30,140 --> 00:00:35,180
and one when we do not provide an authentication token so we can make sure the private route is indeed

9
00:00:35,210 --> 00:00:36,080
private.

10
00:00:36,170 --> 00:00:45,210
First up it should return a user if authenticated.

11
00:00:45,290 --> 00:00:48,710
This one is going to be an asynchronous test like all of the previous ones.

12
00:00:48,730 --> 00:00:52,900
So I will be adding the Dunn argument inside of our callback function.

13
00:00:52,900 --> 00:00:59,650
And the second test case it should return a 4.

14
00:00:59,660 --> 00:01:07,010
0 1 if not authenticated and this task is going to make sure that when no token is provided Random User

15
00:01:07,010 --> 00:01:12,530
Data is not sent back to someone who shouldn't have access to it we're going to do the first test case

16
00:01:12,530 --> 00:01:16,670
together and you'll be responsible for setting up the second one up here.

17
00:01:16,670 --> 00:01:21,360
The first thing we're going to do is make the request to the application using super test.

18
00:01:21,380 --> 00:01:27,200
This is going to be a GET request and the request doesn't require any special you Arel parameters it

19
00:01:27,210 --> 00:01:31,100
simply forward slash users forward slash meat.

20
00:01:31,400 --> 00:01:37,200
Next up we're going to set a header and this is something we haven't done before to set in super test.

21
00:01:37,220 --> 00:01:44,000
We use the set method set takes two arguments and he had her name as the first one and he had her value

22
00:01:44,000 --> 00:01:49,340
is the second one in our case the header name is going to be X off and the header value is going to

23
00:01:49,340 --> 00:01:55,620
be this value right here at the token value inside of the first user.

24
00:01:55,740 --> 00:01:57,570
We're going to go into the users array.

25
00:01:57,690 --> 00:02:03,330
We're going to grab the first item we're going to go into it's tokens array they grab the first item

26
00:02:03,450 --> 00:02:06,900
and access the dot token property.

27
00:02:07,020 --> 00:02:12,150
Now that we have our headers set we can start making some assertions about what should happen we should

28
00:02:12,150 --> 00:02:15,050
get back 200 as the age TTP status code.

29
00:02:15,390 --> 00:02:21,720
We can expect a 200 to come back and we can also go ahead and expect some things about the body that

30
00:02:21,720 --> 00:02:22,770
comes back.

31
00:02:22,860 --> 00:02:29,160
I'm going to expect and I get to pass in a custom expect function and then here we're going to make

32
00:02:29,160 --> 00:02:30,330
a few assertions.

33
00:02:30,330 --> 00:02:34,440
First up let's assert the ID equals the appropriate ID.

34
00:02:34,530 --> 00:02:44,040
I'm going to expect that the response a body id property equals using to be the ID we have here for

35
00:02:44,040 --> 00:02:45,930
the first user.

36
00:02:45,930 --> 00:02:52,770
That means inside of to be I'm going to pass in user's printer grab the first one we're going to grab

37
00:02:52,770 --> 00:02:58,630
the id property and we're going to call two hacks string.

38
00:02:58,740 --> 00:02:59,610
Excellent.

39
00:02:59,610 --> 00:03:04,650
Now this should be the case when we're fetching a user ID that comes back in the body should be the

40
00:03:04,650 --> 00:03:07,770
idea of the user whose token we supplied.

41
00:03:07,770 --> 00:03:11,420
Next up we can go ahead and assert that the e-mails match.

42
00:03:11,420 --> 00:03:18,810
I'm going to expect that the response body e-mail property equals using it to be the following.

43
00:03:18,900 --> 00:03:24,060
We're going to go into that user's array and grab the first item then we just need to access the e-mail

44
00:03:24,090 --> 00:03:25,430
property like this.

45
00:03:25,470 --> 00:03:26,220
And there we go.

46
00:03:26,280 --> 00:03:31,200
We have two assertions that make sure when we provide a valid token we get valid data back.

47
00:03:31,260 --> 00:03:38,670
Now that we have this in place we can go ahead and tack on a call to end passing in done just like we've

48
00:03:38,670 --> 00:03:40,880
done in the past with this in place.

49
00:03:40,890 --> 00:03:43,130
Our test case is now ready to go.

50
00:03:44,230 --> 00:03:48,520
We can run it from the terminal using NPM test when I run it.

51
00:03:48,540 --> 00:03:52,850
We should now see we have 12 test cases and all 12 are passing.

52
00:03:53,160 --> 00:03:55,590
It's going through the to do test cases right now.

53
00:03:55,590 --> 00:03:59,790
Now we're going through the user's me and we do indeed get the appropriate data.

54
00:03:59,790 --> 00:04:04,800
Now the second task that we haven't filled out that one fails because we never call the done function.

55
00:04:04,800 --> 00:04:05,980
That's perfectly fine.

56
00:04:06,000 --> 00:04:09,420
For now this means everything is working as expected.

57
00:04:09,420 --> 00:04:14,580
If the email that comes back is something else I'm going to concatenate the number one and we rerun

58
00:04:14,580 --> 00:04:15,460
the test suite.

59
00:04:15,540 --> 00:04:20,160
We are going to see that test failing because the e-mail that came back on the body which we modified

60
00:04:20,160 --> 00:04:25,620
just to prove a point doesn't equal the e-mail that we added as the seed data right here.

61
00:04:25,620 --> 00:04:29,070
You can see the test case does indeed fail.

62
00:04:29,100 --> 00:04:33,960
I'm going to go ahead and revert that change so it passes again and we can move on to the second function

63
00:04:33,960 --> 00:04:36,090
and this is going to be your first challenge.

64
00:04:36,120 --> 00:04:39,160
Your challenge here is to make a call to the users.

65
00:04:39,180 --> 00:04:44,310
Me Around the same and get request you're not going to provide an X auth token and all you're gonna

66
00:04:44,310 --> 00:04:46,390
do is expect that you get a 401.

67
00:04:46,410 --> 00:04:47,110
Back.

68
00:04:47,250 --> 00:04:52,590
You're also going to expect that the body is equal to an empty object which it should be if the user

69
00:04:52,590 --> 00:04:54,450
is not authenticated.

70
00:04:54,450 --> 00:04:58,920
Once you have both of those assertions in place make sure to call and passing and done.

71
00:04:59,010 --> 00:05:00,790
This is going to wrap up the test case.

72
00:05:00,810 --> 00:05:06,240
And remember also when you're comparing an empty object which is going to be the response body to another

73
00:05:06,240 --> 00:05:12,280
object you have to use to equal not to be take a moment to knock this out.

74
00:05:12,300 --> 00:05:18,450
Go ahead and run the test suite make sure both tests under get users me are passing when they are go

75
00:05:18,450 --> 00:05:22,300
ahead and click play.

76
00:05:22,300 --> 00:05:22,790
All right.

77
00:05:22,900 --> 00:05:26,940
Hopefully you were able to add that test case and see it pass over in the terminal.

78
00:05:26,950 --> 00:05:28,630
First up we got to make the request.

79
00:05:28,630 --> 00:05:29,530
Nothing new here.

80
00:05:30,530 --> 00:05:37,100
Request to the app and we're going to make the exact same request a get request to forward Sodje users

81
00:05:37,160 --> 00:05:38,310
forward slash to me.

82
00:05:38,440 --> 00:05:42,620
And this time around that we will not be calling said we want to see what happens when we don't provide

83
00:05:42,620 --> 00:05:44,930
the token we can make our assertions.

84
00:05:44,930 --> 00:05:46,570
We're expecting a 401.

85
00:05:46,580 --> 00:05:51,680
Which is the status code we send back from in the authenticates middleware and then we can go ahead

86
00:05:51,680 --> 00:05:57,740
and make a custom assertion about the body we can pass in the response argument to our custom callback

87
00:05:57,740 --> 00:06:03,020
function and we can expect that the response body is an empty object which it should be.

88
00:06:03,020 --> 00:06:05,400
We should not have any user properties on it.

89
00:06:05,930 --> 00:06:15,540
I'm going to expect response dot body to equal that object just like this.

90
00:06:15,710 --> 00:06:21,460
Now we can tack on end passing end done in our test case is complete if we don't get a 401.

91
00:06:21,560 --> 00:06:25,930
The test is going to fail if the body includes anything except for an empty object.

92
00:06:25,940 --> 00:06:27,850
The test is going to fail as well.

93
00:06:28,040 --> 00:06:30,890
Over inside of the terminal I'm going to rerun the test suite.

94
00:06:30,950 --> 00:06:36,940
We should now have 13 tests and all of them should be passing and through the to do tests right now.

95
00:06:37,040 --> 00:06:39,660
And we should be getting on to the users tests and there we go.

96
00:06:39,680 --> 00:06:42,490
Both tests are passing which is fantastic.

97
00:06:42,560 --> 00:06:47,390
Now that we have some test cases for the get users mirror outlets go ahead and add some test cases for

98
00:06:47,390 --> 00:06:48,810
the Sign-Up route.

99
00:06:48,830 --> 00:06:49,860
We're going to add three.

100
00:06:49,940 --> 00:06:56,660
But first up we have to add our describe block and the route for this is a post to request to forward

101
00:06:56,660 --> 00:07:03,310
slash users that I can provide my function and inside of here we can add three test cases.

102
00:07:03,320 --> 00:07:09,980
Let's go ahead and call it three times first then we'll worry about the actual test cases it should

103
00:07:10,370 --> 00:07:12,160
create a user.

104
00:07:12,200 --> 00:07:17,540
This call is going to test what happens when we pass in a valid data a valid e-mail that's not already

105
00:07:17,540 --> 00:07:17,960
in use.

106
00:07:17,960 --> 00:07:21,610
Any valid password we should have the user created.

107
00:07:21,620 --> 00:07:31,220
Next up we can test what happens when the fields are invalid it should return validation errors if request

108
00:07:31,700 --> 00:07:32,880
invalid.

109
00:07:32,990 --> 00:07:37,250
And this one is going to make sure that when we provide either an invalid e-mail or a password that's

110
00:07:37,250 --> 00:07:40,600
not at least six characters the user doesn't get created.

111
00:07:40,790 --> 00:07:41,480
The last test.

112
00:07:41,480 --> 00:07:44,060
We're going to write for the sign up method.

113
00:07:44,060 --> 00:07:51,840
It should not create user if e-mail in use.

114
00:07:52,020 --> 00:07:55,670
If the email is already in use we do not want to create the user.

115
00:07:55,680 --> 00:07:59,720
So we're going to write a test case that verifies We do indeed get the error.

116
00:07:59,730 --> 00:08:00,660
Excellent.

117
00:08:00,660 --> 00:08:04,790
Now that we have all the test cases set up let's go ahead and fill out the first one.

118
00:08:05,010 --> 00:08:09,840
This first test case is going to require that we have a unique valid e-mail and a password.

119
00:08:09,840 --> 00:08:14,360
I'm going to make those two variables up above e-mail which all set equal to.

120
00:08:14,370 --> 00:08:24,650
Example at example dot com and password which all set equal to a valid password such as 1 to 3 AM and

121
00:08:24,740 --> 00:08:25,300
B.

122
00:08:25,340 --> 00:08:26,810
Exclamation mark.

123
00:08:26,810 --> 00:08:33,020
Next up we can actually send off the request using a request passing in our app and this one is going

124
00:08:33,020 --> 00:08:34,210
to be a post request.

125
00:08:34,220 --> 00:08:38,810
So I'll call the post method now that you are off this one is not going to be dynamic so we can use

126
00:08:38,810 --> 00:08:41,200
a regular string as opposed to a template string.

127
00:08:41,300 --> 00:08:44,110
And we're going to forward slash users.

128
00:08:44,120 --> 00:08:48,530
This is the route for creating a new user and we are going to need to send some data along with this

129
00:08:48,530 --> 00:08:52,620
request and this is the one that makes sure everything works when we send valid data.

130
00:08:52,640 --> 00:08:57,770
So I will be calling send passing in both the email and password on our object.

131
00:08:57,980 --> 00:09:04,160
Email is going to get the value from the e-mail variable above and we'll do the same thing for password.

132
00:09:04,340 --> 00:09:08,710
Now that we have the request sent off we can start making some assertions about what should happen.

133
00:09:08,720 --> 00:09:15,320
First up we are expecting a 200 it to be the status code that comes back that we can go ahead and expect

134
00:09:15,320 --> 00:09:20,010
that we get our X auth token back using a custom expect call.

135
00:09:20,300 --> 00:09:25,920
We're expecting that the following function doesn't throw any errors.

136
00:09:25,920 --> 00:09:32,120
I'm going to expect that the response headers object has a header called X off.

137
00:09:32,310 --> 00:09:36,000
And in order to get the value we're going to need to use the bracket notation as opposed to the dot

138
00:09:36,000 --> 00:09:41,750
notation because our header name and does have a hyphen in it which would be invalid using dot notation.

139
00:09:41,910 --> 00:09:45,690
Right here though inside of the single quotes we can provide the name x.

140
00:09:45,960 --> 00:09:49,440
We're expecting this value to exist.

141
00:09:49,440 --> 00:09:54,900
We don't really care what it is we just want to make sure it does exist when the user is created.

142
00:09:54,900 --> 00:09:59,440
Next up we can go ahead and verify that there is an e-mail and there is an ID.

143
00:09:59,760 --> 00:10:04,000
I'm going to expect that their response a body has an ID.

144
00:10:04,260 --> 00:10:10,970
We expect the I.D. to exist and we can do the exact same thing for the e-mail.

145
00:10:10,980 --> 00:10:17,630
We're expecting the response abody e-mail property to be the value up above.

146
00:10:17,760 --> 00:10:22,980
Instead of using to exist we can specify the actual value since we know it now that we have this in

147
00:10:22,980 --> 00:10:28,150
place we can go ahead and call and passing in done.

148
00:10:28,270 --> 00:10:33,050
I can save the file and we can run our test case and make sure everything works as expected.

149
00:10:33,280 --> 00:10:35,560
I'm going to rerun the entire test suite.

150
00:10:35,560 --> 00:10:37,720
We should now have 14 passing tests

151
00:10:40,350 --> 00:10:46,380
going through the to do's tests now we're in the users tests and we do indeed have a passing test should

152
00:10:46,380 --> 00:10:48,170
create a user passes.

153
00:10:48,190 --> 00:10:50,490
Now the other tests are failing but that's expected.

154
00:10:50,490 --> 00:10:53,100
We haven't filled those ones out.

155
00:10:53,160 --> 00:10:56,240
Now if you want we can take this test case even a little further.

156
00:10:56,460 --> 00:11:01,350
Instead of passing and done and we could pass in one of our custom functions this is going to let us

157
00:11:01,350 --> 00:11:06,960
query the database making sure everything looks good there like we've done in other custom and functions.

158
00:11:06,960 --> 00:11:11,680
We're going to check if there's an error if there is an error we're simply going to call.

159
00:11:11,690 --> 00:11:12,460
Done.

160
00:11:12,500 --> 00:11:14,080
Return done.

161
00:11:14,140 --> 00:11:15,090
Passing in the error.

162
00:11:15,100 --> 00:11:18,460
So the test fails if there is no errors in the assertions.

163
00:11:18,460 --> 00:11:21,390
Up above we can go ahead and query for a user.

164
00:11:21,670 --> 00:11:29,260
I'm going to use user dot find one to find a user where the email equals the email we have above.

165
00:11:29,260 --> 00:11:34,780
This should indeed return a valid user since we just created it and got a 200 back then I can add on

166
00:11:34,840 --> 00:11:41,560
then we're going to get the user and we can make some assertions about the document saved in the database.

167
00:11:41,560 --> 00:11:49,400
For example we could expect it exists I'm going to expect that the user exists using to exist.

168
00:11:49,400 --> 00:11:54,230
We could even expect that the password does not equal the password we used since it should have been

169
00:11:54,230 --> 00:11:55,630
hashed.

170
00:11:55,640 --> 00:12:01,460
We can expect that the user password property does not equal using.

171
00:12:01,480 --> 00:12:06,570
To not be the password variable defined above.

172
00:12:06,610 --> 00:12:11,110
If the user password is equal to the password above we have a pretty big problem because that means

173
00:12:11,110 --> 00:12:15,110
our passwords are not getting hashed right after my two expect calls.

174
00:12:15,130 --> 00:12:18,280
I can call done wrapping up this test case.

175
00:12:18,280 --> 00:12:23,500
Now that we have this in place I can rerun the test suite and that test should still be passing this

176
00:12:23,500 --> 00:12:28,240
time around though it is fetching the actual user from the database and it's making some assertions

177
00:12:28,300 --> 00:12:33,340
about the document right here moving through all the tests and the first test is failing.

178
00:12:33,340 --> 00:12:35,510
Should create a user is not passing.

179
00:12:35,530 --> 00:12:38,130
Let's go ahead and see what the error is and try to fix it.

180
00:12:38,140 --> 00:12:39,330
User is not defined.

181
00:12:39,370 --> 00:12:40,280
That's an easy one.

182
00:12:40,480 --> 00:12:45,070
When you get errors like this it usually means you forgot to do something basic like importing the correct

183
00:12:45,070 --> 00:12:48,350
library up above all I need to do to fix that error.

184
00:12:48,550 --> 00:12:55,150
This create a constant call user and require the user model forward slash.

185
00:12:55,200 --> 00:13:01,330
We're going to go back a directory into the models directory and we're going to grab the user file.

186
00:13:01,620 --> 00:13:05,280
Now that we have this in place I should be able to save the server test file.

187
00:13:05,280 --> 00:13:10,130
Rerun the test suite and our test case right here should be passing.

188
00:13:10,140 --> 00:13:14,460
I'm going to rerun it to make sure the error was fixed and if it was we can move on to the to final

189
00:13:14,460 --> 00:13:16,620
test cases for this one.

190
00:13:16,800 --> 00:13:22,290
We're going through the to do tests now we're out the user's tests and the first test passes which is

191
00:13:22,290 --> 00:13:24,250
fantastic.

192
00:13:24,280 --> 00:13:29,650
All that's left to do is fill out those final two test cases and this is going to be your second challenge

193
00:13:29,920 --> 00:13:30,660
for this one.

194
00:13:30,670 --> 00:13:35,860
All you need to do is send across an invalid email and an invalid password.

195
00:13:35,860 --> 00:13:42,420
You expect 400 to come back if it does then everything is working as expected for the second one you're

196
00:13:42,430 --> 00:13:44,930
going to go ahead and use an email that's already taken.

197
00:13:45,040 --> 00:13:49,720
Which means that you're going to try to sign up using one of the emails that we use in our seed data.

198
00:13:49,840 --> 00:13:55,390
Either Andrew an example dot com Gen at example dot com or if you happen to name something else go ahead

199
00:13:55,390 --> 00:13:57,100
and use that instead.

200
00:13:57,130 --> 00:14:02,830
This request the second one should also fail when you have an email that's already in use and a valid

201
00:14:02,830 --> 00:14:06,160
password you're going to expect a 400 to come back.

202
00:14:06,160 --> 00:14:09,150
For that take a moment to knock both of those out.

203
00:14:09,190 --> 00:14:11,770
Make sure you get 400 for both.

204
00:14:11,950 --> 00:14:15,290
When you're done run the test suite make sure all the tests are passing.

205
00:14:15,310 --> 00:14:20,460
Then go ahead and click play.

206
00:14:20,520 --> 00:14:25,320
Hopefully you were able to get these two tests complete and passing over inside of the terminal.

207
00:14:25,380 --> 00:14:30,450
The first test were going to run is going to be the one that has an invalid email and an invalid password.

208
00:14:30,450 --> 00:14:33,840
I'm going to request something from the application.

209
00:14:33,840 --> 00:14:38,670
We're going to go ahead and make a post request to the exact same u r l we used above forward slash

210
00:14:38,910 --> 00:14:44,310
users in lower case then we're going to go ahead and send across some data.

211
00:14:44,310 --> 00:14:49,830
I'll provide my object which is going to be the data we send and it will send an email equal to an invalid

212
00:14:49,830 --> 00:14:54,520
email like and and will send a password which is also invalid.

213
00:14:54,540 --> 00:14:56,550
Like one two three.

214
00:14:56,550 --> 00:15:01,260
Both of these are invalid so we can start making some assertions about what we're going to get back.

215
00:15:01,260 --> 00:15:08,250
We're going to expect that we get a 400 back and then we can go ahead and call end passing done this

216
00:15:08,250 --> 00:15:10,010
test case should now pass.

217
00:15:10,050 --> 00:15:16,020
If everything goes as expected I'm going to save the server test file and restart the test suite over

218
00:15:16,030 --> 00:15:17,010
inside of the terminal.

219
00:15:17,070 --> 00:15:21,990
This time around we only have that one test case failing the one we just filled out should indeed be

220
00:15:21,990 --> 00:15:24,180
passing where moving through that to do tasks.

221
00:15:24,180 --> 00:15:28,120
Now we're in the users tests and it's passing which is great.

222
00:15:28,230 --> 00:15:29,990
We can now move on to the final test.

223
00:15:30,000 --> 00:15:34,950
This test makes sure that when we try to sign up a user but that emails are already in use we get a

224
00:15:34,950 --> 00:15:36,300
400 back.

225
00:15:36,600 --> 00:15:40,350
I'm going to kick things off by calling request to initialize the request.

226
00:15:40,350 --> 00:15:45,680
We will be making a post request it to the exact same you are l forward slash users.

227
00:15:45,780 --> 00:15:51,870
And now we can go ahead and set up our data in site of Send Now the data for this test case is supposed

228
00:15:51,870 --> 00:15:52,730
to be valid.

229
00:15:52,800 --> 00:15:58,080
It's just supposed to be already in use which means for the email we want to use one of the emails in

230
00:15:58,080 --> 00:15:59,530
our users array.

231
00:15:59,580 --> 00:16:03,120
I'm going to go ahead and access the first item in the user's array.

232
00:16:03,480 --> 00:16:08,370
I'm going to grab the email and I'm going to use that right here and this email is obviously already

233
00:16:08,370 --> 00:16:13,670
in the database since it's part of our seed data so we should get a 400 back for the password.

234
00:16:13,830 --> 00:16:20,870
I'm going to set it equal to a valid password like password one two three exclamation mark.

235
00:16:20,880 --> 00:16:24,920
Next up we can make our assertion expecting that a 400 comes back.

236
00:16:25,050 --> 00:16:31,770
I'm going to expect that we get a 400 and then I can call and passing in done and we can rerun the test

237
00:16:31,770 --> 00:16:34,630
suite for a final time this time around.

238
00:16:34,650 --> 00:16:38,380
We should have all 16 test cases passing if we do.

239
00:16:38,520 --> 00:16:44,250
We're done we can wrap up the video by making a commit right here we're moving on to the user's tasks

240
00:16:44,280 --> 00:16:48,490
and it looks like everything did work as expected which is fantastic.

241
00:16:48,570 --> 00:16:55,260
Now that we have some test cases in place for the sign up call and the get users Mikol Let's go ahead

242
00:16:55,260 --> 00:16:58,140
and make a commit to save the changes.

243
00:16:58,140 --> 00:17:02,820
I'm going to run get status and right here we have our new seed file as well as our modified server

244
00:17:02,820 --> 00:17:04,020
test file.

245
00:17:04,050 --> 00:17:10,500
I can usually get added to add all of those to the next commit and get commit with the M flag for a

246
00:17:10,500 --> 00:17:20,730
message add tests for get users me and post users.

247
00:17:20,910 --> 00:17:21,740
Excellent.

248
00:17:21,870 --> 00:17:24,000
Now that we have this in place we are done.

249
00:17:24,030 --> 00:17:27,330
I'm going to push things up to get help and that is it for this one.

250
00:17:27,360 --> 00:17:32,430
I will see you in the next video where we keep moving through the process of adding authentication to

251
00:17:32,430 --> 00:17:33,840
the to do API

