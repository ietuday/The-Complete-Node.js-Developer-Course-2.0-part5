1
00:00:00,500 --> 00:00:05,490
In this video you're going to set up a dedicated route for logging in existing users.

2
00:00:05,490 --> 00:00:09,870
Currently the only way you can get an x token back is on the Sign-Up call.

3
00:00:09,960 --> 00:00:14,040
If you lose the token or you sign in from a different device obviously you're going to want to be able

4
00:00:14,040 --> 00:00:14,860
to get a new one.

5
00:00:14,910 --> 00:00:17,010
And currently that is just not possible.

6
00:00:17,010 --> 00:00:21,590
You can't make another call to the post users route because the email already exists.

7
00:00:21,600 --> 00:00:23,670
So the call is going to return a 400.

8
00:00:23,700 --> 00:00:27,000
What we need is a dedicated route for logging in users.

9
00:00:27,090 --> 00:00:32,580
Now Double-O this is going to be a post route and you are all we're going to use for this is forward

10
00:00:32,580 --> 00:00:39,150
slash users forward slash log in when you make a POST request to this route you'll be sending along

11
00:00:39,150 --> 00:00:45,600
some data you're going to send along an email in the request body and also the plain text password.

12
00:00:45,600 --> 00:00:51,090
This means that we're going to need to try to find a user in the Mongo DB user's collection who one

13
00:00:51,270 --> 00:00:58,500
has an e-mail matching the e-mail sent in and two has a hashed password that equals the plain text password

14
00:00:58,620 --> 00:01:05,760
when passed through the B crypt compare method which we used over inside of our hashing js file right

15
00:01:05,760 --> 00:01:06,170
here.

16
00:01:06,210 --> 00:01:10,710
We used to be crypt compare to compare a plain text value with a hash value.

17
00:01:10,740 --> 00:01:16,020
That's exactly what we're going to be doing to get this call to work and setting up this route is going

18
00:01:16,020 --> 00:01:17,720
to be your first challenge.

19
00:01:17,730 --> 00:01:23,220
I want you to set up this route then pick off the email and the password from the request body and to

20
00:01:23,220 --> 00:01:25,200
verify that the route is set up correctly.

21
00:01:25,200 --> 00:01:29,450
You can simply go ahead and respond using response send.

22
00:01:29,490 --> 00:01:33,620
And you can send back the body data then invite you to fire up your server.

23
00:01:33,630 --> 00:01:38,820
Make the log in call in postman passing in an e-mail and a password and make sure you get the e-mail

24
00:01:38,940 --> 00:01:40,550
and password back.

25
00:01:40,560 --> 00:01:47,260
Take a moment to knock this out test it and when you're done go ahead and click play.

26
00:01:47,270 --> 00:01:48,610
All right to get this done.

27
00:01:48,740 --> 00:01:51,230
But I'm going to do is call app drop post.

28
00:01:51,230 --> 00:01:53,290
We want to set up that post route.

29
00:01:53,510 --> 00:01:58,850
Now I can provide to you r l forward slash users forward slash log in.

30
00:01:58,850 --> 00:02:00,770
Now this is going to be a standard express route.

31
00:02:00,770 --> 00:02:04,360
We're not going to be using the authenticate middleware because you don't have a token.

32
00:02:04,370 --> 00:02:07,400
You're trying to get one that's the whole purpose of this call.

33
00:02:07,470 --> 00:02:11,430
We're going to have the request and response arguments inside of our callback function.

34
00:02:11,430 --> 00:02:14,820
And the first thing we're going to do is pick off the e-mail and the password.

35
00:02:14,820 --> 00:02:17,640
Now we've written this line before there's no reason to rewrite it.

36
00:02:17,640 --> 00:02:21,060
I can simply copy and paste it down below.

37
00:02:21,060 --> 00:02:25,110
Now the last thing I wanted you to do just to make sure the data was getting picked off properly is

38
00:02:25,110 --> 00:02:29,770
simply respond response send sending back the abody.

39
00:02:30,060 --> 00:02:31,930
Then we can go ahead and start up our server.

40
00:02:32,100 --> 00:02:34,230
I'm going to use gnomon to do that.

41
00:02:34,230 --> 00:02:36,060
No Amaan server.

42
00:02:36,080 --> 00:02:37,790
Forward slash server.

43
00:02:37,820 --> 00:02:43,800
SJS once the server is up and you see you're started at port three thousand message you can move over

44
00:02:43,800 --> 00:02:46,680
to postman and actually make a log in request.

45
00:02:47,010 --> 00:02:52,480
I'm going to make a post request to the local that you are all I can inject the you are allright here.

46
00:02:52,600 --> 00:02:55,880
Forward slash users forward slash log in.

47
00:02:56,070 --> 00:02:58,920
Then I'm going to send somebody data along as well.

48
00:02:58,950 --> 00:03:00,630
This is going to be Jason data.

49
00:03:00,660 --> 00:03:04,260
We're going to provide our two properties inside of our adjacent object.

50
00:03:04,260 --> 00:03:13,220
First up is going to be the e-mail I'm going to set this to Andrew at example dot com and a password

51
00:03:13,220 --> 00:03:14,950
which I'll set to whatever I like.

52
00:03:14,960 --> 00:03:17,640
1 2 3 ABC Act.

53
00:03:18,110 --> 00:03:22,880
Now that I have this in place I can go ahead and send off my request and down below I do indeed get

54
00:03:22,880 --> 00:03:23,650
the data back.

55
00:03:23,660 --> 00:03:27,830
I have the e-mail and the password is not showing up below because I mis spelt it up above.

56
00:03:27,830 --> 00:03:30,650
If I go ahead and spell it correctly I now get the password.

57
00:03:30,650 --> 00:03:36,160
Also if you have this in place then you're ready to move on actually filling out the route.

58
00:03:36,170 --> 00:03:41,180
Now the first thing we need to do is verify that a user exists with that e-mail.

59
00:03:41,300 --> 00:03:46,390
Then we're going to go ahead and get it's password property and pass that through the crypt compare.

60
00:03:46,400 --> 00:03:50,690
Now all of this is going to happen inside of a nother model method.

61
00:03:50,690 --> 00:03:53,800
We're going to create a model method just like we have in users.

62
00:03:53,870 --> 00:03:57,270
We have an existing model method it is called Find by tokin.

63
00:03:57,320 --> 00:04:00,890
We're going to make a separate one called find by credentials.

64
00:04:00,920 --> 00:04:03,980
This is going to take the email and password as arguments.

65
00:04:03,980 --> 00:04:09,920
It's then going to do its thing returning a promise with a user or with an error if the user didn't

66
00:04:09,980 --> 00:04:11,000
exist.

67
00:04:11,090 --> 00:04:17,810
Right here we can define that method user schema ADOT statics for a model method and this one will be

68
00:04:17,810 --> 00:04:23,320
called Find a by credentials now find by credentials.

69
00:04:23,320 --> 00:04:28,210
As I mentioned is going to take two arguments and I am going to use the function keyword because we

70
00:04:28,210 --> 00:04:34,010
do need access to this binding as we have for all of our other methods right here.

71
00:04:34,120 --> 00:04:39,550
We're going to have our e-mail argument as well as our password argument then we can go ahead and set

72
00:04:39,550 --> 00:04:40,360
up the function.

73
00:04:40,360 --> 00:04:42,690
And now we can call it over inside of server.

74
00:04:43,330 --> 00:04:48,380
I'm going to call it so I know kind of how I want it to work before I actually fill it out over here.

75
00:04:49,170 --> 00:04:50,080
Inside of server.

76
00:04:50,130 --> 00:04:53,300
Yes we can essentially call and find how it's going to work.

77
00:04:53,310 --> 00:04:55,350
This is a strategy I use pretty often.

78
00:04:55,360 --> 00:05:00,030
I'd like to write my method call first so I can figure out exactly what I want the method to do.

79
00:05:00,030 --> 00:05:02,880
Then I go ahead and write the method to fit my needs.

80
00:05:02,940 --> 00:05:09,640
In this case my needs are the ability to pass and email and password and get the user back user ADOT

81
00:05:09,910 --> 00:05:15,090
find by credentials is going to be the method it will be calling and will be passing in the body email

82
00:05:15,100 --> 00:05:19,990
property as well as the body password property.

83
00:05:19,990 --> 00:05:26,620
Next up what I like to be able to do is add a call to then once we find the user the success case should

84
00:05:26,620 --> 00:05:28,310
get that user back.

85
00:05:29,170 --> 00:05:35,050
And right here is where we would go ahead and create a new token responding to the HTP request.

86
00:05:35,050 --> 00:05:39,160
Now if we're not able to find a user that's fine too I'm going to add a catch call.

87
00:05:39,250 --> 00:05:43,780
We're getting at that error argument and right here is where we can respond to the user letting them

88
00:05:43,780 --> 00:05:45,970
know that we were not able to log in.

89
00:05:46,210 --> 00:05:50,800
Now before I go any further I am going to go ahead and actually define defined by credentials.

90
00:05:50,800 --> 00:05:51,990
I know how I want it to work.

91
00:05:52,030 --> 00:05:56,020
And now it's time to fill the method out inside of here.

92
00:05:56,050 --> 00:06:01,180
One of the first things we need to do is simply try to find a user where the e-mail equals of the e-mail

93
00:06:01,180 --> 00:06:02,370
that was passed in.

94
00:06:02,440 --> 00:06:06,610
Now it would be nice if we could do that via email and password but unfortunately we can't remember

95
00:06:06,880 --> 00:06:08,580
we have the plain text password.

96
00:06:08,620 --> 00:06:13,870
We do not have the password actually stored in the database so we can't simply query the data in order

97
00:06:13,870 --> 00:06:15,520
to find a potential match.

98
00:06:15,520 --> 00:06:20,670
We're going to find the user that does have the email of the email passed in.

99
00:06:20,820 --> 00:06:26,290
Now that is going to be nothing new here we're going to make a variable uppercase U user setting an

100
00:06:26,290 --> 00:06:27,300
equal to this.

101
00:06:27,310 --> 00:06:30,250
This is exactly what we did for our find by token method.

102
00:06:30,340 --> 00:06:35,460
And then we can go ahead and make a call to user ADOT find one.

103
00:06:35,560 --> 00:06:40,960
We're going to try to find a one user the user whose email matches the email we have right here.

104
00:06:41,050 --> 00:06:45,200
That means inside of our query all we have to do is reference e-mail like this.

105
00:06:45,210 --> 00:06:48,910
This is going to set an email property equal to the e-mail variable.

106
00:06:48,910 --> 00:06:53,650
Now I am going to be returning this we're going to be changing this promise since I added a then call

107
00:06:53,790 --> 00:07:01,070
and a catch call over here in server J S and N here we are going to tack on a then call because there

108
00:07:01,070 --> 00:07:02,910
is still more work to be done.

109
00:07:03,140 --> 00:07:08,600
We're not quite done we have to verify that the password also matches all of that is going to happen

110
00:07:08,690 --> 00:07:10,010
inside of here.

111
00:07:10,150 --> 00:07:12,140
Now we might get a user we might not.

112
00:07:12,140 --> 00:07:15,110
Either way we are going to specify the user argument.

113
00:07:15,260 --> 00:07:19,430
If we don't get a user we want to do something different we don't want to try to compare passwords since

114
00:07:19,430 --> 00:07:21,740
there is no password to compare.

115
00:07:21,890 --> 00:07:24,630
If there is no user what are we going to do.

116
00:07:24,710 --> 00:07:28,750
We're simply going to return a rejected premise.

117
00:07:28,850 --> 00:07:34,160
This is going to automatically trigger the catch case over here in server Yes and we can respond with

118
00:07:34,160 --> 00:07:35,220
an error.

119
00:07:35,240 --> 00:07:42,140
Now back inside of user dot J.S. we are going to return a call to promise dot reject.

120
00:07:42,230 --> 00:07:43,330
Excellent.

121
00:07:43,340 --> 00:07:47,930
Now we already handled the case where the user doesn't exist it's time to move on and figure out what

122
00:07:47,930 --> 00:07:50,930
to do when a user does exist.

123
00:07:50,930 --> 00:07:55,320
No the problem we're going to run into here is that the B script method we're going to be using be script

124
00:07:55,430 --> 00:08:02,810
doc compare it only supports callbacks in fact all of the script JS library methods only support callbacks.

125
00:08:02,810 --> 00:08:04,610
They do not support promises.

126
00:08:04,640 --> 00:08:07,610
I want to keep using promises I've been using them through the whole app.

127
00:08:07,610 --> 00:08:11,260
They're my preferred way to make a synchronous code work.

128
00:08:11,270 --> 00:08:18,240
So what I'm going to do instead is return a new promise like we did in previous sections here we're

129
00:08:18,240 --> 00:08:20,200
going to provide our function.

130
00:08:20,310 --> 00:08:25,760
We can either call resolve if it's a success we can call reject if it's not a success.

131
00:08:25,830 --> 00:08:28,780
And in here we can do whatever we like in our case.

132
00:08:28,830 --> 00:08:34,710
The thing that we're going to do in here is use decrypt dot compare to compare the password right here

133
00:08:34,980 --> 00:08:38,280
with the user data password property.

134
00:08:38,280 --> 00:08:43,650
Now that means over inside of server J as we are going to be able to do something with the user when

135
00:08:43,650 --> 00:08:44,830
it comes back.

136
00:08:44,930 --> 00:08:51,540
For the moment we're going to do is respond with the user response send something in the user that got

137
00:08:51,540 --> 00:08:52,640
found.

138
00:08:52,650 --> 00:08:56,340
Now notice here I'm not using an if statement to check if user exists or not.

139
00:08:56,370 --> 00:09:00,610
We created defined by credentials method so we get to determine how it works.

140
00:09:00,690 --> 00:09:04,230
If there is no user the catch case is going to get fired.

141
00:09:04,230 --> 00:09:08,580
That's exactly what we did when we set up this if statement right here.

142
00:09:08,580 --> 00:09:11,260
Back inside of server J s inside of catch.

143
00:09:11,370 --> 00:09:19,250
We're going to respond with a 400 status enemy to go ahead and call send to send the response.

144
00:09:19,390 --> 00:09:23,030
Now with this in place we're not quite done in terms of what we're going to add to server.

145
00:09:23,050 --> 00:09:28,310
Yes we do still need to create an authentication tokin that's going to happen in a few minutes.

146
00:09:28,360 --> 00:09:34,690
But for now we have enough in server Jay asks where her challenge can be to complete the find by credentials

147
00:09:34,870 --> 00:09:36,440
method right here.

148
00:09:36,550 --> 00:09:47,290
You're going to use be crypt doc compair use decrypt dot compare to compare password and user dot password.

149
00:09:47,560 --> 00:09:53,350
If the result is true that means you did find a user and you can call resolve with the user.

150
00:09:53,350 --> 00:09:59,140
We found it right here if the result is false meaning that the password and the hash password are not

151
00:09:59,140 --> 00:10:04,450
matches you can just call the reject method which we have defined right here and that will trigger the

152
00:10:04,450 --> 00:10:06,850
catch case over inside of server.

153
00:10:06,880 --> 00:10:12,970
J.S. that means all you really need to put inside of here where the comment is is the compare call just

154
00:10:12,970 --> 00:10:17,650
like we have over inside of our hashing file instead of logging out the response you're going to go

155
00:10:17,650 --> 00:10:19,400
ahead and check if it's true or false.

156
00:10:19,480 --> 00:10:22,570
If it's true you'll call resolved with the user if it's false.

157
00:10:22,660 --> 00:10:24,420
You're going to call reject.

158
00:10:24,640 --> 00:10:25,830
Take a moment to knock that out.

159
00:10:25,840 --> 00:10:27,640
And then I want you to test it as well.

160
00:10:27,640 --> 00:10:31,170
Now you can feel free to completely wipe your robo Mongo database.

161
00:10:31,270 --> 00:10:36,910
Then inside a post man you can make a new user then you can try to log in with those exact same credentials

162
00:10:36,910 --> 00:10:42,130
and what you should get back is the user object since we send it back right here.

163
00:10:42,130 --> 00:10:47,630
Then I'd also like you to mess up either the e-mail or the password and make sure you get a 400 back.

164
00:10:47,830 --> 00:10:49,710
So take a moment to try to knock this out.

165
00:10:49,750 --> 00:10:54,230
Feel free to use anything we've done in any of our projects to solve this problem.

166
00:10:54,310 --> 00:10:57,580
When you're done test it make sure everything works as expected.

167
00:10:57,580 --> 00:11:02,080
Then you can go ahead and click play how that go.

168
00:11:02,160 --> 00:11:06,240
I know that one was a little tricky but hopefully you were able to get it done and you were able to

169
00:11:06,240 --> 00:11:08,540
test it inside of postman.

170
00:11:08,580 --> 00:11:15,240
The first thing I'm going to do is call the crypt dot compare that we've already used be crypt in this

171
00:11:15,240 --> 00:11:15,690
file.

172
00:11:15,690 --> 00:11:17,880
We used it when we created our account.

173
00:11:17,880 --> 00:11:23,340
So there is no reason to go ahead and import it again it's already up there down inside of the challenge

174
00:11:23,370 --> 00:11:23,960
area.

175
00:11:23,970 --> 00:11:26,930
We can now pass in the three necessary arguments.

176
00:11:27,030 --> 00:11:33,510
The first one as we know is the plain password and we have access to that is via the argument password.

177
00:11:33,510 --> 00:11:39,850
Next up we have to pass in the hashed password and this is available on user ADOT password.

178
00:11:39,930 --> 00:11:48,100
And the final argument is our callback function with our two arguments now inside of here we need to

179
00:11:48,100 --> 00:11:52,250
check if the value of response is true or false.

180
00:11:52,340 --> 00:11:58,040
If the response variable is true we want to go ahead and resolve this promise.

181
00:11:58,050 --> 00:12:01,060
We want to resolve it with the user.

182
00:12:01,080 --> 00:12:08,010
This is going to let us do stuff with the user over inside of server J s like we do right here.

183
00:12:08,190 --> 00:12:12,600
If the result variable is not true we can add an else clause in that case.

184
00:12:12,690 --> 00:12:17,340
We're going to simply call a project rejecting the promise and this is going to send a four hundred

185
00:12:17,460 --> 00:12:22,380
back with this in place we're ready to test that everything is working as expected.

186
00:12:22,380 --> 00:12:27,750
I'm going to save the file and inside of robo Mongo I'm going to go ahead and wipe the to do app collection

187
00:12:27,900 --> 00:12:31,040
so I can recreate my users inside of post man.

188
00:12:31,060 --> 00:12:34,850
Then inside a post man we can go ahead and make a sign up request.

189
00:12:34,980 --> 00:12:36,620
I'm going to create that in a new tab.

190
00:12:36,780 --> 00:12:42,030
We can just click our post users request over inside of our collection sidebar and I am going to check

191
00:12:42,030 --> 00:12:45,800
out the data because I need to use these exact same credentials in just a few minutes.

192
00:12:45,810 --> 00:12:51,890
Here we have an example dot com as the email and we have password exclamation mark as the password.

193
00:12:51,900 --> 00:12:53,680
Now I can send off this request.

194
00:12:53,700 --> 00:12:55,390
This is going to create a new account.

195
00:12:55,410 --> 00:12:59,250
We get our ID in our email and we get our X off hetter over here.

196
00:12:59,250 --> 00:13:05,370
The goal now is to use these exact same credentials over inside our log in request up above.

197
00:13:05,370 --> 00:13:07,350
I'm going to go ahead and change the password.

198
00:13:07,350 --> 00:13:09,120
The email is already correct.

199
00:13:09,270 --> 00:13:14,900
I'm going to change it to password exclamation mark and we can send off this request.

200
00:13:14,900 --> 00:13:16,190
And what do we get down below.

201
00:13:16,190 --> 00:13:21,850
We get a status of 200 and we get the user object back which is fantastic.

202
00:13:21,860 --> 00:13:27,740
Notice here we are getting the exact same user the ID matches the ID we have inside of our response

203
00:13:27,740 --> 00:13:29,990
body for the sign up call.

204
00:13:30,140 --> 00:13:34,100
Now that we have this in place we can go ahead and test what happens when we send a bad password like

205
00:13:34,100 --> 00:13:36,210
password without an exclamation mark.

206
00:13:36,230 --> 00:13:38,030
In that case we get to 400.

207
00:13:38,030 --> 00:13:42,030
We can also try to fetch a user whose email doesn't even exist.

208
00:13:42,200 --> 00:13:43,910
If I send that off what do we get.

209
00:13:43,940 --> 00:13:46,120
We could have 400 as well.

210
00:13:46,130 --> 00:13:51,530
Now I'm going to change this back to the working example and we can go ahead and save this request.

211
00:13:51,530 --> 00:13:56,570
If I send it off I can verify everything is working as expected and I'm going to add it to my to do

212
00:13:56,900 --> 00:13:58,510
app collection.

213
00:13:58,610 --> 00:14:02,480
We're going to use the same scheme we've been using for all of our routes and we're going to go ahead

214
00:14:02,510 --> 00:14:04,610
and save them into the same collection.

215
00:14:04,640 --> 00:14:08,030
And with this in place we are ready to move on to the very final step.

216
00:14:08,060 --> 00:14:15,110
The final step inside of Adam is going to be to actually generate a new token and send it back and we're

217
00:14:15,110 --> 00:14:18,680
going to use the exact same generate auth token method.

218
00:14:18,710 --> 00:14:20,870
There is no reason to create a new one.

219
00:14:20,870 --> 00:14:24,890
This is why we created the method in the first place we created it to be reusable.

220
00:14:25,070 --> 00:14:31,460
Right here inside of our success case for when we do find the user we instead of actually responding

221
00:14:31,490 --> 00:14:41,420
are going to call user dot generate auth token and then we can go ahead and tack on a then call back.

222
00:14:41,600 --> 00:14:45,920
And then here will be getting the new token that was just created.

223
00:14:45,980 --> 00:14:49,250
Now with this in place we can go ahead and return.

224
00:14:49,250 --> 00:14:54,560
This is going to keep the chain alive so if we do run into any errors inside of the callback right here

225
00:14:54,800 --> 00:15:00,980
the 400 will be used as the response inside of year the only thing we need to do is respond and we're

226
00:15:00,980 --> 00:15:04,980
going to respond in a literally the exact same way responded up above.

227
00:15:05,000 --> 00:15:09,560
So much so that I can actually take the line copy it and paste it down below.

228
00:15:09,650 --> 00:15:16,520
Right inside of generate auth token here we use response header to set the X off after we set it equal

229
00:15:16,520 --> 00:15:17,060
to the token.

230
00:15:17,060 --> 00:15:24,050
We just generated and finally send the response body back as the user which we were already doing with

231
00:15:24,050 --> 00:15:30,230
this in place we can now save server J S for the final time and test that everything works as expected

232
00:15:30,830 --> 00:15:32,300
over inside of postman.

233
00:15:32,300 --> 00:15:38,150
What we need to do is make another log and request one that is valid and down here inside of headers.

234
00:15:38,180 --> 00:15:40,480
We should now have the X auth value.

235
00:15:40,670 --> 00:15:48,640
I can take this value and make a request to get users me to verify that it is indeed a valid token.

236
00:15:48,680 --> 00:15:53,750
I'm gonna head over to the users meet request and swap out the X auth token value for the one I just

237
00:15:53,750 --> 00:15:55,170
copied it to the clipboard.

238
00:15:55,220 --> 00:15:59,810
I'm going to send it off and right down here we get the user back which is fantastic.

239
00:15:59,810 --> 00:16:05,990
This means that the log in call is indeed working the token it sends back does work with our other private

240
00:16:06,110 --> 00:16:06,970
routes.

241
00:16:07,220 --> 00:16:12,110
Now that we have this in place we are done with a log in route in the next video we're going to write

242
00:16:12,110 --> 00:16:14,270
some test cases for the log in route.

243
00:16:14,270 --> 00:16:18,510
But for now we are done we can go ahead and wrap this one up by making a commit.

244
00:16:18,530 --> 00:16:20,920
I'm going to make sure all my atom files are saved.

245
00:16:20,920 --> 00:16:26,750
It looks like they are over inside of the terminal I can now shut down gnomon and run get status.

246
00:16:26,750 --> 00:16:33,740
Here we have our two changed files as expected which means we can go ahead and use get commit with the

247
00:16:33,740 --> 00:16:43,010
EM flag and a good message for this one would be ADD post users log in route.

248
00:16:43,040 --> 00:16:46,480
I'm going to make the commit push it up to get hub and that is it for this one.

249
00:16:46,580 --> 00:16:49,950
I will see you next time where we test the route we just created.

